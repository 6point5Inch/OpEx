{"abi":[{"type":"function","name":"and","inputs":[{"name":"offsets","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"arbitraryStaticCall","inputs":[{"name":"target","type":"address","internalType":"address"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"eq","inputs":[{"name":"value","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"gt","inputs":[{"name":"value","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"lt","inputs":[{"name":"value","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"not","inputs":[{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"or","inputs":[{"name":"offsets","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"error","name":"ArbitraryStaticCallFailed","inputs":[]}],"bytecode":{"object":"0x6080806040523461001657610395908161001b8239f35b5f80fdfe604060808152600480361015610013575f80fd5b5f3560e01c9081634f38e2b8146101dd5781636fe7b0ba146101ac5781637426114514610191578163bf15fcd814610125578163bf797959146100cd57508063bfa75143146100a95763ca4ece221461006a575f80fd5b346100a55761008860209161007e3661023c565b909391933061033b565b8193919361009b575b5050519015158152f35b1091505f80610091565b5f80fd5b50346100a5576020906100c46100be3661023c565b916102df565b90519015158152f35b82346100a55760203660031901126100a55781359167ffffffffffffffff83116100a55761010361010a9160209436910161020e565b903061033b565b8192919261011c575b50519015158152f35b15915083610113565b82346100a557806003193601126100a55781356001600160a01b03811681036100a5576024359067ffffffffffffffff82116100a55761016b610171923690860161020e565b9161033b565b919015610182576020925051908152f35b51631f1b8f6160e01b81529050fd5b82346100a5576020906100c46101a63661023c565b91610288565b82346100a5576101c160209161007e3661023c565b819391936101d3575050519015158152f35b1491508380610091565b82346100a5576101f260209161007e3661023c565b81939193610204575050519015158152f35b1191508380610091565b9181601f840112156100a55782359167ffffffffffffffff83116100a557602083818601950101116100a557565b9060406003198301126100a557600435916024359067ffffffffffffffff82116100a55761026c9160040161020e565b9091565b909392938483116100a55784116100a5578101920390565b929091925f5b63ffffffff82169081156102d557610103826102ab928888610270565b816102ca575b506102c0579060201c9061028e565b5050915050600190565b60019150145f6102b1565b5050509150505f90565b929091925f5b63ffffffff82169081156103305761010382610302928888610270565b9015908115610324575b5061031b579060201c906102e5565b50509150505f90565b6001915014155f61030c565b505050915050600190565b915f906020928294826040519283375afa60203d1416918261035957565b5f51915056fea2646970667358221220d3e6fcecd79c15a224c5106877262890dfe5583168a629de10611da9fa68b84d64736f6c63430008170033","sourceMap":"152:3778:66:-:0;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x604060808152600480361015610013575f80fd5b5f3560e01c9081634f38e2b8146101dd5781636fe7b0ba146101ac5781637426114514610191578163bf15fcd814610125578163bf797959146100cd57508063bfa75143146100a95763ca4ece221461006a575f80fd5b346100a55761008860209161007e3661023c565b909391933061033b565b8193919361009b575b5050519015158152f35b1091505f80610091565b5f80fd5b50346100a5576020906100c46100be3661023c565b916102df565b90519015158152f35b82346100a55760203660031901126100a55781359167ffffffffffffffff83116100a55761010361010a9160209436910161020e565b903061033b565b8192919261011c575b50519015158152f35b15915083610113565b82346100a557806003193601126100a55781356001600160a01b03811681036100a5576024359067ffffffffffffffff82116100a55761016b610171923690860161020e565b9161033b565b919015610182576020925051908152f35b51631f1b8f6160e01b81529050fd5b82346100a5576020906100c46101a63661023c565b91610288565b82346100a5576101c160209161007e3661023c565b819391936101d3575050519015158152f35b1491508380610091565b82346100a5576101f260209161007e3661023c565b81939193610204575050519015158152f35b1191508380610091565b9181601f840112156100a55782359167ffffffffffffffff83116100a557602083818601950101116100a557565b9060406003198301126100a557600435916024359067ffffffffffffffff82116100a55761026c9160040161020e565b9091565b909392938483116100a55784116100a5578101920390565b929091925f5b63ffffffff82169081156102d557610103826102ab928888610270565b816102ca575b506102c0579060201c9061028e565b5050915050600190565b60019150145f6102b1565b5050509150505f90565b929091925f5b63ffffffff82169081156103305761010382610302928888610270565b9015908115610324575b5061031b579060201c906102e5565b50509150505f90565b6001915014155f61030c565b505050915050600190565b915f906020928294826040519283375afa60203d1416918261035957565b5f51915056fea2646970667358221220d3e6fcecd79c15a224c5106877262890dfe5583168a629de10611da9fa68b84d64736f6c63430008170033","sourceMap":"152:3778:66:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2506:39;152:3778;;;;;:::i;:::-;2533:4;;;;;2506:39;:::i;:::-;2562:22;;;;;;152:3778;;;;;;;;;;2562:22;2573:11;;-1:-1:-1;2562:22:66;;;;152:3778;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;;152:3778:66;;;;;;;;;;;;;1652:39;152:3778;;;;;;;:::i;:::-;1679:4;;1652:39;:::i;:::-;1708:19;;;;;;152:3778;;;;;;;;;1708:19;1719:8;;-1:-1:-1;1708:19:66;;;152:3778;;;;;;;;;;;;;;;-1:-1:-1;;;;;152:3778:66;;;;;;;;;;;;;;;3280:32;152:3778;;;;;;:::i;:::-;3280:32;;:::i;:::-;3326:8;;;3322:48;;152:3778;;;;;;;;3322:48;152:3778;-1:-1:-1;;;3343:27:66;;152:3778;-1:-1:-1;3343:27:66;152:3778;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;2074:39;152:3778;;;;;:::i;2074:39::-;2130:23;;;;;;152:3778;;;;;;;;;2130:23;2141:12;;-1:-1:-1;2130:23:66;;;;152:3778;;;;;2939:39;152:3778;;;;;:::i;2939:39::-;2995:22;;;;;;152:3778;;;;;;;;;2995:22;3006:11;;-1:-1:-1;2995:22:66;;;;152:3778;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;152:3778:66;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;364:439::-;;;;;152:3778;533:14;152:3778;;;499:32;;;;;627:22;;593:57;627:22;;;;:::i;593:57::-;668:19;;;533:14;664:69;;;533:14;545:2;152:3778;482:15;;;664:69;707:11;;;;;714:4;707:11;:::o;668:19::-;686:1;679:8;;;668:19;;;499:32;;;;;;;152:3778;364:439;:::o;952:441::-;;;;;152:3778;1122:14;152:3778;;;1088:32;;;;;1216:22;;1182:57;1216:22;;;;:::i;1182:57::-;1257:8;;152:3778;;;1257:20;;1122:14;1253:71;;;1122:14;1134:2;152:3778;1071:15;;;1253:71;1297:12;;;;;152:3778;1297:12;:::o;1257:20::-;1276:1;1269:8;;;;1257:20;;;1088:32;;;;;;;1382:4;952:441;:::o;3403:525::-;;152:3778;3403:525;3556:366;3403:525;3529:11;3556:366;;;;;;;;;;;;;;;;;3403:525::o;3556:366::-;152:3778;3556:366;;-1:-1:-1;3403:525:66:o","linkReferences":{}},"methodIdentifiers":{"and(uint256,bytes)":"bfa75143","arbitraryStaticCall(address,bytes)":"bf15fcd8","eq(uint256,bytes)":"6fe7b0ba","gt(uint256,bytes)":"4f38e2b8","lt(uint256,bytes)":"ca4ece22","not(bytes)":"bf797959","or(uint256,bytes)":"74261145"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ArbitraryStaticCallFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offsets\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"and\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"arbitraryStaticCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"eq\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"gt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"lt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"not\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offsets\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"or\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"and(uint256,bytes)\":{\"returns\":{\"_0\":\"Result True if calls to all targets returned True. Otherwise, false\"}},\"arbitraryStaticCall(address,bytes)\":{\"returns\":{\"_0\":\"Result Bytes transmuted to uint256\"}},\"eq(uint256,bytes)\":{\"params\":{\"value\":\"Value to test\"},\"returns\":{\"_0\":\"Result True if call to target returns the same value as `value`. Otherwise, false\"}},\"gt(uint256,bytes)\":{\"params\":{\"value\":\"Value to test\"},\"returns\":{\"_0\":\"Result True if call to target returns value which is bigger than `value`. Otherwise, false\"}},\"lt(uint256,bytes)\":{\"params\":{\"value\":\"Value to test\"},\"returns\":{\"_0\":\"Result True if call to target returns value which is lower than `value`. Otherwise, false\"}},\"not(bytes)\":{\"returns\":{\"_0\":\"Result True if call to target returns 0. Otherwise, false\"}},\"or(uint256,bytes)\":{\"returns\":{\"_0\":\"Result True if call to any target returned True. Otherwise, false\"}}},\"title\":\"A helper contract for executing boolean functions on arbitrary target call results\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"and(uint256,bytes)\":{\"notice\":\"Calls every target with corresponding data\"},\"arbitraryStaticCall(address,bytes)\":{\"notice\":\"Performs an arbitrary call to target with data\"},\"eq(uint256,bytes)\":{\"notice\":\"Calls target with specified data and tests if it's equal to the value\"},\"gt(uint256,bytes)\":{\"notice\":\"Calls target with specified data and tests if it's bigger than value\"},\"lt(uint256,bytes)\":{\"notice\":\"Calls target with specified data and tests if it's lower than value\"},\"not(bytes)\":{\"notice\":\"Calls target with specified data and tests if it's equal to 0\"},\"or(uint256,bytes)\":{\"notice\":\"Calls every target with corresponding data\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/helpers/PredicateHelper.sol\":\"PredicateHelper\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@1inch/limit-order-protocol/contracts/=lib/limit-order-protocol/contracts/\",\":@1inch/solidity-utils/contracts/=lib/solidity-utils/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":limit-order-protocol/=lib/limit-order-protocol/contracts/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solidity-utils/=lib/solidity-utils/contracts/\"],\"viaIR\":true},\"sources\":{\"src/helpers/PredicateHelper.sol\":{\"keccak256\":\"0x1c43021d083bc079810a6c7f3e0166dca6bd7c33e67c98b9b94c2895fbd0430b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7bfa08bc78615bb6d7b11cce499df6ce8bd5574f3fb90dc4845e0396a6a61b7d\",\"dweb:/ipfs/QmYcwPm6p3ck9hidCRFfjSeamRUffjXz7XdeB345vEhH8i\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"ArbitraryStaticCallFailed"},{"inputs":[{"internalType":"uint256","name":"offsets","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"view","type":"function","name":"and","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"view","type":"function","name":"arbitraryStaticCall","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"view","type":"function","name":"eq","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"view","type":"function","name":"gt","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"view","type":"function","name":"lt","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"view","type":"function","name":"not","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"offsets","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"view","type":"function","name":"or","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"and(uint256,bytes)":{"returns":{"_0":"Result True if calls to all targets returned True. Otherwise, false"}},"arbitraryStaticCall(address,bytes)":{"returns":{"_0":"Result Bytes transmuted to uint256"}},"eq(uint256,bytes)":{"params":{"value":"Value to test"},"returns":{"_0":"Result True if call to target returns the same value as `value`. Otherwise, false"}},"gt(uint256,bytes)":{"params":{"value":"Value to test"},"returns":{"_0":"Result True if call to target returns value which is bigger than `value`. Otherwise, false"}},"lt(uint256,bytes)":{"params":{"value":"Value to test"},"returns":{"_0":"Result True if call to target returns value which is lower than `value`. Otherwise, false"}},"not(bytes)":{"returns":{"_0":"Result True if call to target returns 0. Otherwise, false"}},"or(uint256,bytes)":{"returns":{"_0":"Result True if call to any target returned True. Otherwise, false"}}},"version":1},"userdoc":{"kind":"user","methods":{"and(uint256,bytes)":{"notice":"Calls every target with corresponding data"},"arbitraryStaticCall(address,bytes)":{"notice":"Performs an arbitrary call to target with data"},"eq(uint256,bytes)":{"notice":"Calls target with specified data and tests if it's equal to the value"},"gt(uint256,bytes)":{"notice":"Calls target with specified data and tests if it's bigger than value"},"lt(uint256,bytes)":{"notice":"Calls target with specified data and tests if it's lower than value"},"not(bytes)":{"notice":"Calls target with specified data and tests if it's equal to 0"},"or(uint256,bytes)":{"notice":"Calls every target with corresponding data"}},"version":1}},"settings":{"remappings":["@1inch/limit-order-protocol/contracts/=lib/limit-order-protocol/contracts/","@1inch/solidity-utils/contracts/=lib/solidity-utils/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","limit-order-protocol/=lib/limit-order-protocol/contracts/","openzeppelin-contracts/=lib/openzeppelin-contracts/","solidity-utils/=lib/solidity-utils/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/helpers/PredicateHelper.sol":"PredicateHelper"},"evmVersion":"shanghai","libraries":{},"viaIR":true},"sources":{"src/helpers/PredicateHelper.sol":{"keccak256":"0x1c43021d083bc079810a6c7f3e0166dca6bd7c33e67c98b9b94c2895fbd0430b","urls":["bzz-raw://7bfa08bc78615bb6d7b11cce499df6ce8bd5574f3fb90dc4845e0396a6a61b7d","dweb:/ipfs/QmYcwPm6p3ck9hidCRFfjSeamRUffjXz7XdeB345vEhH8i"],"license":"MIT"}},"version":1},"id":66}